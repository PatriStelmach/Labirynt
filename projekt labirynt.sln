#include <iostream>
#include <string>

using namespace std;

char gracz = '8';
char klawisz;

const int k = 10;
const int j = 20;
char labirynt[k][j] =

{
    {'#','$','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
    {'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
    {'#',' ','#','#',' ','#','#','#','#','#','#',' ','#','#',' ','#','#','#',' ','#'},
    {'#',' ','#','#',' ','#',' ','#',' ','#','#',' ','#','#',' ','#',' ',' ',' ','#'},
    {'#',' ',' ',' ',' ',' ',' ','#',' ','#','#',' ','#','#',' ','#','#','#',' ','#'},
    {'#',' ','#','#','#','#',' ','#',' ','#',' ',' ','#',' ',' ',' ',' ','#',' ','#'},
    {'#',' ','#',' ',' ',' ',' ',' ',' ','#','#','#','#',' ','#','#',' ','#',' ','#'},
    {'#',' ','#','#','#','#','#','#','#','#','#','#','#',' ','#','#',' ','#',' ','#'},
    {'#',' ','#',' ',' ',' ',' ',' ',' ','@',' ',' ',' ',' ',' ',' ',' ','#',' ','#'},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
};

char temp = '$';
int gracz_x(0);
int gracz_y(0);

void sciana();
void pozycja();
void ruchy();
void wypisanie();
void wygrana();




int main()
{
    cout << "Witam w grze 'LABIRYNT' " << endl;
    cout << "---------------------\n\n" << endl;

    pozycja();

    do
    {

        wypisanie();

        cin >> klawisz;
        ruchy();
            
        sciana();

    } while (labirynt[gracz_y][gracz_x] != '@');
    
    

    return 0;
}





void ruchy()
{

    switch (klawisz)
    {
    case 'g':

        labirynt[gracz_y][gracz_x] = temp;
        gracz_y--;
        temp = labirynt[gracz_y][gracz_x];
        
        wygrana();

        labirynt[gracz_y][gracz_x] = gracz;      
        break;
    case 'd':

        labirynt[gracz_y][gracz_x] = temp;
        gracz_y++;
        temp = labirynt[gracz_y][gracz_x];
        
        wygrana();

        labirynt[gracz_y][gracz_x] = gracz;       
        break;
    case 'l':

        labirynt[gracz_y][gracz_x] = temp;
        gracz_x--;
        temp = labirynt[gracz_y][gracz_x];

        wygrana();

        labirynt[gracz_y][gracz_x] = gracz;      
        break;
    case 'p':

        labirynt[gracz_y][gracz_x] = temp;
        gracz_x++;
        temp = labirynt[gracz_y][gracz_x];

        wygrana();

        labirynt[gracz_y][gracz_x] = gracz;
        break;
    default:
        break;
    }

}

void wypisanie()
{
    for (int y = 0; y <= k-1; y++)
    {
        for (int x = 0; x <= j-1; x++)
        {
            cout << labirynt[y][x];
        }
        cout << endl;
    }
}

void pozycja()
{
    for (int y = 0; y <= k-1; y++)
    {
        for (int x = 0; x <= j-1; x++)
        {
            if (labirynt[y][x] == '$')
            {

                labirynt[y][x] = gracz;
                gracz_x = x;
                gracz_y = y;
                break;
            }
        }
    }
}

void wygrana()
{
    if (labirynt[gracz_y][gracz_x] == '@')
    {
        cout << "WYGRALES!\n\n" << endl;
        exit(0);
        
    }

}


void sciana()
{
    int l = 3;
    

    if (labirynt[gracz_y][gracz_x] == '#', l - 1)
    {
        
        cout << "Zostalo ci " << l << "Hp\n" << endl;
        if (l < 1)
        {
            cout << "Zostalo ci 0 HP, koniec gry\n " << endl;
            exit(0);
        }
       
    }
}








